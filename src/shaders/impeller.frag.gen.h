// This C++ shader is autogenerated by spirv-cross.
#include <stdint.h>
#include <array>
#include "spirv_cross/external_interface.h"
#include "spirv_cross/internal_interface.hpp"

using namespace spirv_cross;
using namespace glm;

namespace Impl {
struct Shader {
  struct Resources : FragmentResources {
    struct FragInfo {
      vec2 texture_size;
      float time;
    };

    internal::Resource<FragInfo> frag_info__;
#define frag_info __res->frag_info__.get()

    internal::StageInput<vec2> v_screen_position__;
#define v_screen_position __res->v_screen_position__.get()

    internal::StageOutput<vec4> frag_color__;
#define frag_color __res->frag_color__.get()

    internal::Resource<sampler2D> blue_noise__;
#define blue_noise __res->blue_noise__.get()

    internal::Resource<samplerCube> cube_map__;
#define cube_map __res->cube_map__.get()

    vec2 _13450;
    int32_t _13470;
    float _15897;

    inline void init(spirv_cross_shader& s) {
      FragmentResources::init(s);
      s.register_resource(frag_info__, 0, 2);
      s.register_stage_input(v_screen_position__, 0);
      s.register_stage_output(frag_color__, 0);
      s.register_resource(blue_noise__, 0, 1);
      s.register_resource(cube_map__, 0, 0);
    }
  };

  Resources* __res;

  inline void main() {
    float _1223 = frag_info.time * 0.5f;
    vec3 _1246 = vec3(sin(_1223 + 0.20000000298023223876953125f) * (-6.25f),
                      (cos(_1223 + 0.300000011920928955078125f) *
                       (-2.900000095367431640625f)) +
                          1.0f,
                      cos(_1223 - 0.100000001490116119384765625f) *
                          (-5.400000095367431640625f)) *
                 2.0f;
    vec3 _1250 = normalize(-_1246);
    vec3 _1252 = _1246 + vec3(0.0f, 2.0f, 0.0f);
    vec2 _1341 = (v_screen_position - (frag_info.texture_size * 0.5f)) /
                 frag_info.texture_size.xx();
    vec3 _1343 = cross(_1250, vec3(0.0f, 1.0f, 0.0f));
    vec3 _1266 =
        _1252 + (normalize(((_1250 * 0.4226182401180267333984375f) +
                            ((_1343 * _1341.x) * 0.90630781650543212890625f)) +
                           ((cross(_1250, _1343) * _1341.y) *
                            0.90630781650543212890625f)) *
                 12.0f);
    vec2 _13449;
    vec2 _13757;
    vec2 _14131;
    vec2 _14559;
    _14559 = _13450;
    _14131 = _13450;
    _13757 = _13450;
    _13449 = _13450;
    vec2 _13446;
    int32_t _13466;
    vec2 _14527;
    int32_t _14668;
    vec2 _15589;
    int32_t _15676;
    vec2 _15762;
    int32_t _15812;
    int32_t _13469;
    int32_t _13818;
    int32_t _14229;
    int32_t _14700;
    for (int32_t _13366 = 0; _13366 < 4; _14700 = _14668, _14559 = _14527,
                 _14229 = _15812, _14131 = _15762, _13818 = _15676,
                 _13757 = _15589, _13469 = _13466, _13449 = _13446, _13366++) {
      float _1283 = float(_13366) + mod(frag_info.time, 10.0f);
      vec4 _1397 = texture(
          blue_noise,
          (v_screen_position * vec2(0.00390625f)) +
              fract(sin(vec2(dot(vec2(_1283, -0.100000001490116119384765625f),
                                 vec2(13.876796722412109375f,
                                      22.209148406982421875f)),
                             dot(vec2(_1283, -0.20000000298023223876953125f),
                                 vec2(12.3432216644287109375f,
                                      48.0579376220703125f)))) *
                    24791.81640625f));
      vec3 _1293 = _1252 + (_1397.xyz() * 0.5f);
      vec3 _1298 = normalize(_1266 - _1293);
      do {
        float _1594;
        bool _13429;
        vec2 _13447;
        int32_t _13467;
        int32_t _13367 = 0;
        float _13368 = 0.0f;
        for (;;) {
          if (_13367 < 70) {
            if (_13368 > 300.0f) {
              _13467 = _13367;
              _13447 = vec2(300.0f, -1.0f);
              _13429 = true;
              break;
            }
            vec3 _1564 = _1293 + (_1298 * _13368);
            float _2383 = frag_info.time * 0.20999999344348907470703125f;
            float _2386 = frag_info.time * 0.23999999463558197021484375f;
            float _2389 = frag_info.time * 0.17000000178813934326171875f;
            float _2408 = cos(_2383);
            float _2411 = cos(_2386);
            float _2418 = sin(_2386);
            float _2419 = _2408 * _2418;
            float _2422 = sin(_2389);
            float _2426 = sin(_2383);
            float _2429 = cos(_2389);
            float _2464 = _2426 * _2418;
            vec3 _2524 =
                abs(mat3(vec3(_2408 * _2411, (_2419 * _2422) - (_2426 * _2429),
                              (_2419 * _2429) + (_2426 * _2422)),
                         vec3(_2426 * _2411, (_2464 * _2422) + (_2408 * _2429),
                              (_2464 * _2429) - (_2408 * _2422)),
                         vec3(-_2418, _2411 * _2422, _2411 * _2429)) *
                    (_1564 + vec3(0.0f, (-4.5f) + sin(frag_info.time), 0.0f))) -
                vec3(1.0f);
            float _2403 = (length(max(_2524, vec3(0.0f))) +
                           min(max(_2524.x, max(_2524.y, _2524.z)), 0.0f)) -
                          3.0f;
            float _2554 = length(_1564.xz());
            float _2596 = max(
                (_1564 +
                 vec3(0.0f,
                      3.0f +
                          mix((min(0.5f, _2554 * 0.3333333432674407958984375f) *
                               sin(((_2554 * 2.0f) -
                                    (mod(frag_info.time,
                                         3.1415927410125732421875f) *
                                     30.0f)) +
                                   (atan(_1564.z, _1564.x) * 6.0f))) *
                                  1.5f,
                              (_2554 * 0.5f) - 4.0f,
                              clamp(_2554 - 4.599999904632568359375f, 0.0f,
                                    1.0f)),
                      0.0f))
                        .y *
                    0.5f,
                length(_1564 + vec3(0.0f, 2.0f, 0.0f)) - 6.0f);
            bool _2598 = _2554 < 5.599999904632568359375f;
            bool _2604;
            if (_2598) {
              _2604 = _1564.y > (-7.0f);
            } else {
              _2604 = _2598;
            }
            float _13369;
            if (_2604) {
              float _2607 = _1564.y;
              bool _2608 = _2607 > (-2.3599998950958251953125f);
              bool _2614;
              if (_2608) {
                _2614 = _2607 < (-2.099999904632568359375f);
              } else {
                _2614 = _2608;
              }
              _13369 = _2614 ? 5.0f : 6.0f;
            } else {
              _13369 = 4.0f;
            }
            bool _2363 = _2596 < _2403;
            float _2371 =
                (_2363 ? _2596 : _2403) - 0.00999999977648258209228515625f;
            if (abs(_2371) < 0.001000000047497451305389404296875f) {
              _13467 = _13367;
              _13447 = vec2(_13368, _2363 ? _13369 : (-2.0f));
              _13429 = true;
              break;
            }
            _1594 = _13368 + _2371;
            _13368 = _1594;
            _13367++;
            continue;
          } else {
            _13467 = _13469;
            _13447 = _13449;
            _13429 = false;
            break;
          }
        }
        if (_13429) {
          _13466 = _13467;
          _13446 = _13447;
          break;
        }
        _13466 = 70;
        _13446 = vec2(300.0f, -1.0f);
        break;
      } while (false);
      vec3 _1447 = _1293 + (_1298 * _13446.x);
      vec3 _2638 =
          _1447 + vec3(0.001000000047497451305389404296875f, 0.0f, 0.0f);
      float _2702 = frag_info.time * 0.20999999344348907470703125f;
      float _2705 = frag_info.time * 0.23999999463558197021484375f;
      float _2708 = frag_info.time * 0.17000000178813934326171875f;
      float _2727 = cos(_2702);
      float _2730 = cos(_2705);
      float _2737 = sin(_2705);
      float _2738 = _2727 * _2737;
      float _2741 = sin(_2708);
      float _2745 = sin(_2702);
      float _2748 = cos(_2708);
      float _2783 = _2745 * _2737;
      mat3 _2836 = mat3(vec3(_2727 * _2730, (_2738 * _2741) - (_2745 * _2748),
                             (_2738 * _2748) + (_2745 * _2741)),
                        vec3(_2745 * _2730, (_2783 * _2741) + (_2727 * _2748),
                             (_2783 * _2748) - (_2727 * _2741)),
                        vec3(-_2737, _2730 * _2741, _2730 * _2748));
      float _2714 = sin(frag_info.time);
      vec3 _2716 = vec3(0.0f, (-4.5f) + _2714, 0.0f);
      vec3 _2843 = abs(_2836 * (_2638 + _2716)) - vec3(1.0f);
      float _2722 = (length(max(_2843, vec3(0.0f))) +
                     min(max(_2843.x, max(_2843.y, _2843.z)), 0.0f)) -
                    3.0f;
      float _2873 = length(_2638.xz());
      float _2882 = mod(frag_info.time, 3.1415927410125732421875f) * 30.0f;
      float _2915 = max(
          (_2638 +
           vec3(0.0f,
                3.0f + mix((min(0.5f, _2873 * 0.3333333432674407958984375f) *
                            sin(((_2873 * 2.0f) - _2882) +
                                (atan(_2638.z, _2638.x) * 6.0f))) *
                               1.5f,
                           (_2873 * 0.5f) - 4.0f,
                           clamp(_2873 - 4.599999904632568359375f, 0.0f, 1.0f)),
                0.0f))
                  .y *
              0.5f,
          length(_1447 +
                 vec3(0.001000000047497451305389404296875f, 2.0f, 0.0f)) -
              6.0f);
      vec3 _2642 =
          _1447 + vec3(-0.001000000047497451305389404296875f, 0.0f, 0.0f);
      vec3 _3125 = abs(_2836 * (_2642 + _2716)) - vec3(1.0f);
      float _3004 = (length(max(_3125, vec3(0.0f))) +
                     min(max(_3125.x, max(_3125.y, _3125.z)), 0.0f)) -
                    3.0f;
      float _3155 = length(_2642.xz());
      float _3197 = max(
          (_2642 +
           vec3(0.0f,
                3.0f + mix((min(0.5f, _3155 * 0.3333333432674407958984375f) *
                            sin(((_3155 * 2.0f) - _2882) +
                                (atan(_2642.z, _2642.x) * 6.0f))) *
                               1.5f,
                           (_3155 * 0.5f) - 4.0f,
                           clamp(_3155 - 4.599999904632568359375f, 0.0f, 1.0f)),
                0.0f))
                  .y *
              0.5f,
          length(_1447 +
                 vec3(-0.001000000047497451305389404296875f, 2.0f, 0.0f)) -
              6.0f);
      vec3 _2647 =
          _1447 + vec3(0.0f, 0.001000000047497451305389404296875f, 0.0f);
      vec3 _3407 = abs(_2836 * (_2647 + _2716)) - vec3(1.0f);
      float _3286 = (length(max(_3407, vec3(0.0f))) +
                     min(max(_3407.x, max(_3407.y, _3407.z)), 0.0f)) -
                    3.0f;
      float _3437 = length(_2647.xz());
      float _3479 = max(
          (_2647 +
           vec3(0.0f,
                3.0f + mix((min(0.5f, _3437 * 0.3333333432674407958984375f) *
                            sin(((_3437 * 2.0f) - _2882) +
                                (atan(_2647.z, _2647.x) * 6.0f))) *
                               1.5f,
                           (_3437 * 0.5f) - 4.0f,
                           clamp(_3437 - 4.599999904632568359375f, 0.0f, 1.0f)),
                0.0f))
                  .y *
              0.5f,
          length(_1447 + vec3(0.0f, 2.000999927520751953125f, 0.0f)) - 6.0f);
      vec3 _2651 =
          _1447 + vec3(0.0f, -0.001000000047497451305389404296875f, 0.0f);
      vec3 _3689 = abs(_2836 * (_2651 + _2716)) - vec3(1.0f);
      float _3568 = (length(max(_3689, vec3(0.0f))) +
                     min(max(_3689.x, max(_3689.y, _3689.z)), 0.0f)) -
                    3.0f;
      float _3719 = length(_2651.xz());
      float _3761 = max(
          (_2651 +
           vec3(0.0f,
                3.0f + mix((min(0.5f, _3719 * 0.3333333432674407958984375f) *
                            sin(((_3719 * 2.0f) - _2882) +
                                (atan(_2651.z, _2651.x) * 6.0f))) *
                               1.5f,
                           (_3719 * 0.5f) - 4.0f,
                           clamp(_3719 - 4.599999904632568359375f, 0.0f, 1.0f)),
                0.0f))
                  .y *
              0.5f,
          length(_1447 + vec3(0.0f, 1.99899995326995849609375f, 0.0f)) - 6.0f);
      vec3 _2656 =
          _1447 + vec3(0.0f, 0.0f, 0.001000000047497451305389404296875f);
      vec3 _3971 = abs(_2836 * (_2656 + _2716)) - vec3(1.0f);
      float _3850 = (length(max(_3971, vec3(0.0f))) +
                     min(max(_3971.x, max(_3971.y, _3971.z)), 0.0f)) -
                    3.0f;
      float _4001 = length(_2656.xz());
      float _4043 = max(
          (_2656 +
           vec3(0.0f,
                3.0f + mix((min(0.5f, _4001 * 0.3333333432674407958984375f) *
                            sin(((_4001 * 2.0f) - _2882) +
                                (atan(_2656.z, _2656.x) * 6.0f))) *
                               1.5f,
                           (_4001 * 0.5f) - 4.0f,
                           clamp(_4001 - 4.599999904632568359375f, 0.0f, 1.0f)),
                0.0f))
                  .y *
              0.5f,
          length(_1447 +
                 vec3(0.0f, 2.0f, 0.001000000047497451305389404296875f)) -
              6.0f);
      vec3 _2660 =
          _1447 + vec3(0.0f, 0.0f, -0.001000000047497451305389404296875f);
      vec3 _4253 = abs(_2836 * (_2660 + _2716)) - vec3(1.0f);
      float _4132 = (length(max(_4253, vec3(0.0f))) +
                     min(max(_4253.x, max(_4253.y, _4253.z)), 0.0f)) -
                    3.0f;
      float _4283 = length(_2660.xz());
      float _4325 = max(
          (_2660 +
           vec3(0.0f,
                3.0f + mix((min(0.5f, _4283 * 0.3333333432674407958984375f) *
                            sin(((_4283 * 2.0f) - _2882) +
                                (atan(_2660.z, _2660.x) * 6.0f))) *
                               1.5f,
                           (_4283 * 0.5f) - 4.0f,
                           clamp(_4283 - 4.599999904632568359375f, 0.0f, 1.0f)),
                0.0f))
                  .y *
              0.5f,
          length(_1447 +
                 vec3(0.0f, 2.0f, -0.001000000047497451305389404296875f)) -
              6.0f);
      vec3 _2665 = normalize(vec3((((_2915 < _2722) ? _2915 : _2722) -
                                   0.00999999977648258209228515625f) -
                                      (((_3197 < _3004) ? _3197 : _3004) -
                                       0.00999999977648258209228515625f),
                                  (((_3479 < _3286) ? _3479 : _3286) -
                                   0.00999999977648258209228515625f) -
                                      (((_3761 < _3568) ? _3761 : _3568) -
                                       0.00999999977648258209228515625f),
                                  (((_4043 < _3850) ? _4043 : _3850) -
                                   0.00999999977648258209228515625f) -
                                      (((_4325 < _4132) ? _4325 : _4132) -
                                       0.00999999977648258209228515625f)));
      vec2 _13963;
      vec3 _13982;
      vec3 _14001;
      vec3 _14002;
      int32_t _14299;
      vec4 _14974;
      float _15079;
      if (_13446.y == (-2.0f)) {
        vec3 _1456 = reflect(_1298, _2665);
        vec4 _4362 = texture(cube_map, _1456);
        vec3 _1466 = refract(_1298, _2665, 1.10000002384185791015625f);
        vec3 _1470 = _1447 + (_1466 * 0.5f);
        vec2 _13727;
        int32_t _13788;
        do {
          float _4420;
          bool _13710;
          vec2 _13728;
          int32_t _13789;
          int32_t _13648 = 0;
          float _13649 = 0.0f;
          for (;;) {
            if (_13648 < 70) {
              if (_13649 > 300.0f) {
                _13789 = _13648;
                _13728 = vec2(300.0f, -1.0f);
                _13710 = true;
                break;
              }
              vec3 _4390 = _1470 + (_1466 * _13649);
              float _4816 = sin(frag_info.time * 1.13699996471405029296875f) *
                            0.14285714924335479736328125f;
              float _4822 = sin((frag_info.time * 1.3980000019073486328125f) +
                                0.699999988079071044921875f) *
                            0.125f;
              float _4828 = sin((frag_info.time * 0.87300002574920654296875f) +
                                0.300000011920928955078125f) *
                            0.20000000298023223876953125f;
              float _4832 = cos(_4828);
              float _4835 = cos(_4822);
              float _4839 = sin(_4828);
              float _4842 = sin(_4822);
              float _4853 = cos(_4816);
              float _4857 = sin(_4816);
              vec3 _4884 = (mat3(vec3(_4832 * _4835, _4839, -_4842),
                                 vec3(-_4839, _4832 * _4853, -_4857),
                                 vec3(_4842, _4857, _4853 * _4835)) *
                            (_4390 * 1.2999999523162841796875f)) +
                           vec3(-1.0f, (-4.0f) + _2714, 0.0f);
              float _4887 = _4884.y;
              vec3 _4951 = abs(_4884 + vec3(-_4887, 0.0f, 0.0f)) -
                           vec3(1.0f, 2.0f, 0.60000002384185791015625f);
              float _4898 =
                  max((length(max(_4951, vec3(0.0f))) +
                       min(max(_4951.x, max(_4951.y, _4951.z)), 0.0f)) *
                          0.54392826557159423828125f,
                      dot(_4884 + vec3(0.5f, 0.5f, 0.0f),
                          vec3(0.707106769084930419921875f,
                               0.707106769084930419921875f, 0.0f)));
              vec3 _4972 = abs(_4884 + vec3(_4887, 0.0f, 0.0f)) -
                           vec3(1.0f, 2.0f, 0.699999988079071044921875f);
              float _4909 = dot(_4884 + vec3(-0.5f, 0.5f, 0.0f),
                                vec3(0.707106769084930419921875f,
                                     -0.707106769084930419921875f, 0.0f));
              float _4912 =
                  max((length(max(_4972, vec3(0.0f))) +
                       min(max(_4972.x, max(_4972.y, _4972.z)), 0.0f)) *
                          0.54392826557159423828125f,
                      _4909);
              bool _4915 = _4912 < _4898;
              float _13662;
              if (_4915) {
                _13662 = (dot(_4884 + vec3(0.5f, -0.5f, 0.0f),
                              vec3(0.707106769084930419921875f,
                                   -0.707106769084930419921875f, 0.0f)) > 0.0f)
                             ? 2.0f
                             : 3.0f;
              } else {
                _13662 = 1.0f;
              }
              float _15906 = _4915 ? _4912 : _4898;
              vec3 _4993 = abs(_4884 + vec3(_4887 - 3.0f, -2.0f, 0.0f)) -
                           vec3(1.0f, 3.5f, 0.699999988079071044921875f);
              float _4935 =
                  max((length(max(_4993, vec3(0.0f))) +
                       min(max(_4993.x, max(_4993.y, _4993.z)), 0.0f)) *
                          0.54392826557159423828125f,
                      _4909);
              bool _4938 = _4935 < _15906;
              float _15908 = _4938 ? _4935 : _15906;
              vec3 _5158 = abs(_2836 * (_4390 + _2716)) - vec3(1.0f);
              float _4781 =
                  3.0f - (length(max(_5158, vec3(0.0f))) +
                          min(max(_5158.x, max(_5158.y, _5158.z)), 0.0f));
              bool _4784 = _4781 < _15908;
              float _15910 = _4784 ? _4781 : _15908;
              if (abs(_15910) < 0.001000000047497451305389404296875f) {
                _13789 = _13648;
                _13728 =
                    vec2(_13649, _4784 ? (-3.0f) : (_4938 ? 3.0f : _13662));
                _13710 = true;
                break;
              }
              _4420 = _13649 + _15910;
              _13649 = _4420;
              _13648++;
              continue;
            } else {
              _13789 = _13818;
              _13728 = _13757;
              _13710 = false;
              break;
            }
          }
          if (_13710) {
            _13788 = _13789;
            _13727 = _13728;
            break;
          }
          _13788 = 70;
          _13727 = vec2(300.0f, -1.0f);
          break;
        } while (false);
        vec3 _1483 = _1470 + (_1466 * _13727.x);
        vec3 _5464 =
            _1483 + vec3(0.001000000047497451305389404296875f, 0.0f, 0.0f);
        float _5543 = sin(frag_info.time * 1.13699996471405029296875f) *
                      0.14285714924335479736328125f;
        float _5549 = sin((frag_info.time * 1.3980000019073486328125f) +
                          0.699999988079071044921875f) *
                      0.125f;
        float _5555 = sin((frag_info.time * 0.87300002574920654296875f) +
                          0.300000011920928955078125f) *
                      0.20000000298023223876953125f;
        float _5559 = cos(_5555);
        float _5562 = cos(_5549);
        float _5566 = sin(_5555);
        float _5569 = sin(_5549);
        float _5580 = cos(_5543);
        float _5584 = sin(_5543);
        mat3 _5602 = mat3(vec3(_5559 * _5562, _5566, -_5569),
                          vec3(-_5566, _5559 * _5580, -_5584),
                          vec3(_5569, _5584, _5580 * _5562));
        vec3 _5610 = vec3(-1.0f, (-4.0f) + _2714, 0.0f);
        vec3 _5611 = (_5602 * (_5464 * 1.2999999523162841796875f)) + _5610;
        float _5614 = _5611.y;
        vec3 _5678 = abs(_5611 + vec3(-_5614, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.60000002384185791015625f);
        float _5625 = max((length(max(_5678, vec3(0.0f))) +
                           min(max(_5678.x, max(_5678.y, _5678.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          dot(_5611 + vec3(0.5f, 0.5f, 0.0f),
                              vec3(0.707106769084930419921875f,
                                   0.707106769084930419921875f, 0.0f)));
        vec3 _5699 = abs(_5611 + vec3(_5614, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.699999988079071044921875f);
        float _5636 = dot(_5611 + vec3(-0.5f, 0.5f, 0.0f),
                          vec3(0.707106769084930419921875f,
                               -0.707106769084930419921875f, 0.0f));
        float _5639 = max((length(max(_5699, vec3(0.0f))) +
                           min(max(_5699.x, max(_5699.y, _5699.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _5636);
        float _15911 = (_5639 < _5625) ? _5639 : _5625;
        vec3 _5720 = abs(_5611 + vec3(_5614 - 3.0f, -2.0f, 0.0f)) -
                     vec3(1.0f, 3.5f, 0.699999988079071044921875f);
        float _5662 = max((length(max(_5720, vec3(0.0f))) +
                           min(max(_5720.x, max(_5720.y, _5720.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _5636);
        float _15912 = (_5662 < _15911) ? _5662 : _15911;
        vec3 _5885 = abs(_2836 * (_5464 + _2716)) - vec3(1.0f);
        float _5508 = 3.0f - (length(max(_5885, vec3(0.0f))) +
                              min(max(_5885.x, max(_5885.y, _5885.z)), 0.0f));
        vec3 _5468 =
            _1483 + vec3(-0.001000000047497451305389404296875f, 0.0f, 0.0f);
        vec3 _6019 = (_5602 * (_5468 * 1.2999999523162841796875f)) + _5610;
        float _6022 = _6019.y;
        vec3 _6086 = abs(_6019 + vec3(-_6022, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.60000002384185791015625f);
        float _6033 = max((length(max(_6086, vec3(0.0f))) +
                           min(max(_6086.x, max(_6086.y, _6086.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          dot(_6019 + vec3(0.5f, 0.5f, 0.0f),
                              vec3(0.707106769084930419921875f,
                                   0.707106769084930419921875f, 0.0f)));
        vec3 _6107 = abs(_6019 + vec3(_6022, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.699999988079071044921875f);
        float _6044 = dot(_6019 + vec3(-0.5f, 0.5f, 0.0f),
                          vec3(0.707106769084930419921875f,
                               -0.707106769084930419921875f, 0.0f));
        float _6047 = max((length(max(_6107, vec3(0.0f))) +
                           min(max(_6107.x, max(_6107.y, _6107.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _6044);
        float _15914 = (_6047 < _6033) ? _6047 : _6033;
        vec3 _6128 = abs(_6019 + vec3(_6022 - 3.0f, -2.0f, 0.0f)) -
                     vec3(1.0f, 3.5f, 0.699999988079071044921875f);
        float _6070 = max((length(max(_6128, vec3(0.0f))) +
                           min(max(_6128.x, max(_6128.y, _6128.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _6044);
        float _15915 = (_6070 < _15914) ? _6070 : _15914;
        vec3 _6293 = abs(_2836 * (_5468 + _2716)) - vec3(1.0f);
        float _5916 = 3.0f - (length(max(_6293, vec3(0.0f))) +
                              min(max(_6293.x, max(_6293.y, _6293.z)), 0.0f));
        vec3 _5473 =
            _1483 + vec3(0.0f, 0.001000000047497451305389404296875f, 0.0f);
        vec3 _6427 = (_5602 * (_5473 * 1.2999999523162841796875f)) + _5610;
        float _6430 = _6427.y;
        vec3 _6494 = abs(_6427 + vec3(-_6430, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.60000002384185791015625f);
        float _6441 = max((length(max(_6494, vec3(0.0f))) +
                           min(max(_6494.x, max(_6494.y, _6494.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          dot(_6427 + vec3(0.5f, 0.5f, 0.0f),
                              vec3(0.707106769084930419921875f,
                                   0.707106769084930419921875f, 0.0f)));
        vec3 _6515 = abs(_6427 + vec3(_6430, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.699999988079071044921875f);
        float _6452 = dot(_6427 + vec3(-0.5f, 0.5f, 0.0f),
                          vec3(0.707106769084930419921875f,
                               -0.707106769084930419921875f, 0.0f));
        float _6455 = max((length(max(_6515, vec3(0.0f))) +
                           min(max(_6515.x, max(_6515.y, _6515.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _6452);
        float _15917 = (_6455 < _6441) ? _6455 : _6441;
        vec3 _6536 = abs(_6427 + vec3(_6430 - 3.0f, -2.0f, 0.0f)) -
                     vec3(1.0f, 3.5f, 0.699999988079071044921875f);
        float _6478 = max((length(max(_6536, vec3(0.0f))) +
                           min(max(_6536.x, max(_6536.y, _6536.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _6452);
        float _15918 = (_6478 < _15917) ? _6478 : _15917;
        vec3 _6701 = abs(_2836 * (_5473 + _2716)) - vec3(1.0f);
        float _6324 = 3.0f - (length(max(_6701, vec3(0.0f))) +
                              min(max(_6701.x, max(_6701.y, _6701.z)), 0.0f));
        vec3 _5477 =
            _1483 + vec3(0.0f, -0.001000000047497451305389404296875f, 0.0f);
        vec3 _6835 = (_5602 * (_5477 * 1.2999999523162841796875f)) + _5610;
        float _6838 = _6835.y;
        vec3 _6902 = abs(_6835 + vec3(-_6838, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.60000002384185791015625f);
        float _6849 = max((length(max(_6902, vec3(0.0f))) +
                           min(max(_6902.x, max(_6902.y, _6902.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          dot(_6835 + vec3(0.5f, 0.5f, 0.0f),
                              vec3(0.707106769084930419921875f,
                                   0.707106769084930419921875f, 0.0f)));
        vec3 _6923 = abs(_6835 + vec3(_6838, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.699999988079071044921875f);
        float _6860 = dot(_6835 + vec3(-0.5f, 0.5f, 0.0f),
                          vec3(0.707106769084930419921875f,
                               -0.707106769084930419921875f, 0.0f));
        float _6863 = max((length(max(_6923, vec3(0.0f))) +
                           min(max(_6923.x, max(_6923.y, _6923.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _6860);
        float _15920 = (_6863 < _6849) ? _6863 : _6849;
        vec3 _6944 = abs(_6835 + vec3(_6838 - 3.0f, -2.0f, 0.0f)) -
                     vec3(1.0f, 3.5f, 0.699999988079071044921875f);
        float _6886 = max((length(max(_6944, vec3(0.0f))) +
                           min(max(_6944.x, max(_6944.y, _6944.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _6860);
        float _15921 = (_6886 < _15920) ? _6886 : _15920;
        vec3 _7109 = abs(_2836 * (_5477 + _2716)) - vec3(1.0f);
        float _6732 = 3.0f - (length(max(_7109, vec3(0.0f))) +
                              min(max(_7109.x, max(_7109.y, _7109.z)), 0.0f));
        vec3 _5482 =
            _1483 + vec3(0.0f, 0.0f, 0.001000000047497451305389404296875f);
        vec3 _7243 = (_5602 * (_5482 * 1.2999999523162841796875f)) + _5610;
        float _7246 = _7243.y;
        vec3 _7310 = abs(_7243 + vec3(-_7246, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.60000002384185791015625f);
        float _7257 = max((length(max(_7310, vec3(0.0f))) +
                           min(max(_7310.x, max(_7310.y, _7310.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          dot(_7243 + vec3(0.5f, 0.5f, 0.0f),
                              vec3(0.707106769084930419921875f,
                                   0.707106769084930419921875f, 0.0f)));
        vec3 _7331 = abs(_7243 + vec3(_7246, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.699999988079071044921875f);
        float _7268 = dot(_7243 + vec3(-0.5f, 0.5f, 0.0f),
                          vec3(0.707106769084930419921875f,
                               -0.707106769084930419921875f, 0.0f));
        float _7271 = max((length(max(_7331, vec3(0.0f))) +
                           min(max(_7331.x, max(_7331.y, _7331.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _7268);
        float _15923 = (_7271 < _7257) ? _7271 : _7257;
        vec3 _7352 = abs(_7243 + vec3(_7246 - 3.0f, -2.0f, 0.0f)) -
                     vec3(1.0f, 3.5f, 0.699999988079071044921875f);
        float _7294 = max((length(max(_7352, vec3(0.0f))) +
                           min(max(_7352.x, max(_7352.y, _7352.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _7268);
        float _15924 = (_7294 < _15923) ? _7294 : _15923;
        vec3 _7517 = abs(_2836 * (_5482 + _2716)) - vec3(1.0f);
        float _7140 = 3.0f - (length(max(_7517, vec3(0.0f))) +
                              min(max(_7517.x, max(_7517.y, _7517.z)), 0.0f));
        vec3 _5486 =
            _1483 + vec3(0.0f, 0.0f, -0.001000000047497451305389404296875f);
        vec3 _7651 = (_5602 * (_5486 * 1.2999999523162841796875f)) + _5610;
        float _7654 = _7651.y;
        vec3 _7718 = abs(_7651 + vec3(-_7654, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.60000002384185791015625f);
        float _7665 = max((length(max(_7718, vec3(0.0f))) +
                           min(max(_7718.x, max(_7718.y, _7718.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          dot(_7651 + vec3(0.5f, 0.5f, 0.0f),
                              vec3(0.707106769084930419921875f,
                                   0.707106769084930419921875f, 0.0f)));
        vec3 _7739 = abs(_7651 + vec3(_7654, 0.0f, 0.0f)) -
                     vec3(1.0f, 2.0f, 0.699999988079071044921875f);
        float _7676 = dot(_7651 + vec3(-0.5f, 0.5f, 0.0f),
                          vec3(0.707106769084930419921875f,
                               -0.707106769084930419921875f, 0.0f));
        float _7679 = max((length(max(_7739, vec3(0.0f))) +
                           min(max(_7739.x, max(_7739.y, _7739.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _7676);
        float _15926 = (_7679 < _7665) ? _7679 : _7665;
        vec3 _7760 = abs(_7651 + vec3(_7654 - 3.0f, -2.0f, 0.0f)) -
                     vec3(1.0f, 3.5f, 0.699999988079071044921875f);
        float _7702 = max((length(max(_7760, vec3(0.0f))) +
                           min(max(_7760.x, max(_7760.y, _7760.z)), 0.0f)) *
                              0.54392826557159423828125f,
                          _7676);
        float _15927 = (_7702 < _15926) ? _7702 : _15926;
        vec3 _7925 = abs(_2836 * (_5486 + _2716)) - vec3(1.0f);
        float _7548 = 3.0f - (length(max(_7925, vec3(0.0f))) +
                              min(max(_7925.x, max(_7925.y, _7925.z)), 0.0f));
        _15676 = _13788;
        _15589 = _13727;
        _15079 = 0.5f - (dot(_1456, _2665) * 0.60000002384185791015625f);
        _14974 = _4362;
        _14299 = _13466 + _13788;
        _14002 = _1483;
        _14001 = normalize(vec3(((_5508 < _15912) ? _5508 : _15912) -
                                    ((_5916 < _15915) ? _5916 : _15915),
                                ((_6324 < _15918) ? _6324 : _15918) -
                                    ((_6732 < _15921) ? _6732 : _15921),
                                ((_7140 < _15924) ? _7140 : _15924) -
                                    ((_7548 < _15927) ? _7548 : _15927)));
        _13982 = _1466;
        _13963 = _13727;
      } else {
        _15676 = _13818;
        _15589 = _13757;
        _15079 = 0.0f;
        _14974 = vec4(0.0f);
        _14299 = _13466;
        _14002 = _1447;
        _14001 = _2665;
        _13982 = _1298;
        _13963 = _13446;
      }
      vec3 _14423;
      vec3 _14814;
      vec3 _14858;
      vec2 _14878;
      int32_t _14922;
      if (_13963.y == (-3.0f)) {
        vec3 _1493 = refract(_13982, _14001, 0.909090936183929443359375f);
        vec3 _1497 = _14002 + (_1493 * 1.0f);
        vec3 _1503 = _1497 + (_1493 * _13963.x);
        vec2 _14100;
        int32_t _14198;
        do {
          float _7997;
          bool _14083;
          vec2 _14101;
          int32_t _14199;
          int32_t _14021 = 0;
          float _14022 = 0.0f;
          for (;;) {
            if (_14021 < 70) {
              if (_14022 > 300.0f) {
                _14199 = _14021;
                _14101 = vec2(300.0f, -1.0f);
                _14083 = true;
                break;
              }
              vec3 _7967 = _1503 + (_1493 * _14022);
              vec3 _8927 = abs(_2836 * (_7967 + _2716)) - vec3(1.0f);
              float _8806 = (length(max(_8927, vec3(0.0f))) +
                             min(max(_8927.x, max(_8927.y, _8927.z)), 0.0f)) -
                            3.0f;
              float _8957 = length(_7967.xz());
              float _8999 = max(
                  (_7967 +
                   vec3(0.0f,
                        3.0f + mix((min(0.5f,
                                        _8957 * 0.3333333432674407958984375f) *
                                    sin(((_8957 * 2.0f) - _2882) +
                                        (atan(_7967.z, _7967.x) * 6.0f))) *
                                       1.5f,
                                   (_8957 * 0.5f) - 4.0f,
                                   clamp(_8957 - 4.599999904632568359375f, 0.0f,
                                         1.0f)),
                        0.0f))
                          .y *
                      0.5f,
                  length(_7967 + vec3(0.0f, 2.0f, 0.0f)) - 6.0f);
              bool _9001 = _8957 < 5.599999904632568359375f;
              bool _9007;
              if (_9001) {
                _9007 = _7967.y > (-7.0f);
              } else {
                _9007 = _9001;
              }
              float _14023;
              if (_9007) {
                float _9010 = _7967.y;
                bool _9011 = _9010 > (-2.3599998950958251953125f);
                bool _9017;
                if (_9011) {
                  _9017 = _9010 < (-2.099999904632568359375f);
                } else {
                  _9017 = _9011;
                }
                _14023 = _9017 ? 5.0f : 6.0f;
              } else {
                _14023 = 4.0f;
              }
              bool _8766 = _8999 < _8806;
              float _8774 =
                  (_8766 ? _8999 : _8806) - 0.00999999977648258209228515625f;
              if (abs(_8774) < 0.001000000047497451305389404296875f) {
                _14199 = _14021;
                _14101 = vec2(_14022, _8766 ? _14023 : (-2.0f));
                _14083 = true;
                break;
              }
              _7997 = _14022 + _8774;
              _14022 = _7997;
              _14021++;
              continue;
            } else {
              _14199 = _14229;
              _14101 = _14131;
              _14083 = false;
              break;
            }
          }
          if (_14083) {
            _14198 = _14199;
            _14100 = _14101;
            break;
          }
          _14198 = 70;
          _14100 = vec2(300.0f, -1.0f);
          break;
        } while (false);
        vec3 _1515 = _1497 + (_1493 * _14100.x);
        vec3 _9041 =
            _1515 + vec3(0.001000000047497451305389404296875f, 0.0f, 0.0f);
        vec3 _9246 = abs(_2836 * (_9041 + _2716)) - vec3(1.0f);
        float _9125 = (length(max(_9246, vec3(0.0f))) +
                       min(max(_9246.x, max(_9246.y, _9246.z)), 0.0f)) -
                      3.0f;
        float _9276 = length(_9041.xz());
        float _9318 = max(
            (_9041 +
             vec3(0.0f,
                  3.0f +
                      mix((min(0.5f, _9276 * 0.3333333432674407958984375f) *
                           sin(((_9276 * 2.0f) - _2882) +
                               (atan(_9041.z, _9041.x) * 6.0f))) *
                              1.5f,
                          (_9276 * 0.5f) - 4.0f,
                          clamp(_9276 - 4.599999904632568359375f, 0.0f, 1.0f)),
                  0.0f))
                    .y *
                0.5f,
            length(_1515 +
                   vec3(0.001000000047497451305389404296875f, 2.0f, 0.0f)) -
                6.0f);
        vec3 _9045 =
            _1515 + vec3(-0.001000000047497451305389404296875f, 0.0f, 0.0f);
        vec3 _9528 = abs(_2836 * (_9045 + _2716)) - vec3(1.0f);
        float _9407 = (length(max(_9528, vec3(0.0f))) +
                       min(max(_9528.x, max(_9528.y, _9528.z)), 0.0f)) -
                      3.0f;
        float _9558 = length(_9045.xz());
        float _9600 = max(
            (_9045 +
             vec3(0.0f,
                  3.0f +
                      mix((min(0.5f, _9558 * 0.3333333432674407958984375f) *
                           sin(((_9558 * 2.0f) - _2882) +
                               (atan(_9045.z, _9045.x) * 6.0f))) *
                              1.5f,
                          (_9558 * 0.5f) - 4.0f,
                          clamp(_9558 - 4.599999904632568359375f, 0.0f, 1.0f)),
                  0.0f))
                    .y *
                0.5f,
            length(_1515 +
                   vec3(-0.001000000047497451305389404296875f, 2.0f, 0.0f)) -
                6.0f);
        vec3 _9050 =
            _1515 + vec3(0.0f, 0.001000000047497451305389404296875f, 0.0f);
        vec3 _9810 = abs(_2836 * (_9050 + _2716)) - vec3(1.0f);
        float _9689 = (length(max(_9810, vec3(0.0f))) +
                       min(max(_9810.x, max(_9810.y, _9810.z)), 0.0f)) -
                      3.0f;
        float _9840 = length(_9050.xz());
        float _9882 = max(
            (_9050 +
             vec3(0.0f,
                  3.0f +
                      mix((min(0.5f, _9840 * 0.3333333432674407958984375f) *
                           sin(((_9840 * 2.0f) - _2882) +
                               (atan(_9050.z, _9050.x) * 6.0f))) *
                              1.5f,
                          (_9840 * 0.5f) - 4.0f,
                          clamp(_9840 - 4.599999904632568359375f, 0.0f, 1.0f)),
                  0.0f))
                    .y *
                0.5f,
            length(_1515 + vec3(0.0f, 2.000999927520751953125f, 0.0f)) - 6.0f);
        vec3 _9054 =
            _1515 + vec3(0.0f, -0.001000000047497451305389404296875f, 0.0f);
        vec3 _10092 = abs(_2836 * (_9054 + _2716)) - vec3(1.0f);
        float _9971 = (length(max(_10092, vec3(0.0f))) +
                       min(max(_10092.x, max(_10092.y, _10092.z)), 0.0f)) -
                      3.0f;
        float _10122 = length(_9054.xz());
        float _10164 = max(
            (_9054 +
             vec3(0.0f,
                  3.0f +
                      mix((min(0.5f, _10122 * 0.3333333432674407958984375f) *
                           sin(((_10122 * 2.0f) - _2882) +
                               (atan(_9054.z, _9054.x) * 6.0f))) *
                              1.5f,
                          (_10122 * 0.5f) - 4.0f,
                          clamp(_10122 - 4.599999904632568359375f, 0.0f, 1.0f)),
                  0.0f))
                    .y *
                0.5f,
            length(_1515 + vec3(0.0f, 1.99899995326995849609375f, 0.0f)) -
                6.0f);
        vec3 _9059 =
            _1515 + vec3(0.0f, 0.0f, 0.001000000047497451305389404296875f);
        vec3 _10374 = abs(_2836 * (_9059 + _2716)) - vec3(1.0f);
        float _10253 = (length(max(_10374, vec3(0.0f))) +
                        min(max(_10374.x, max(_10374.y, _10374.z)), 0.0f)) -
                       3.0f;
        float _10404 = length(_9059.xz());
        float _10446 = max(
            (_9059 +
             vec3(0.0f,
                  3.0f +
                      mix((min(0.5f, _10404 * 0.3333333432674407958984375f) *
                           sin(((_10404 * 2.0f) - _2882) +
                               (atan(_9059.z, _9059.x) * 6.0f))) *
                              1.5f,
                          (_10404 * 0.5f) - 4.0f,
                          clamp(_10404 - 4.599999904632568359375f, 0.0f, 1.0f)),
                  0.0f))
                    .y *
                0.5f,
            length(_1515 +
                   vec3(0.0f, 2.0f, 0.001000000047497451305389404296875f)) -
                6.0f);
        vec3 _9063 =
            _1515 + vec3(0.0f, 0.0f, -0.001000000047497451305389404296875f);
        vec3 _10656 = abs(_2836 * (_9063 + _2716)) - vec3(1.0f);
        float _10535 = (length(max(_10656, vec3(0.0f))) +
                        min(max(_10656.x, max(_10656.y, _10656.z)), 0.0f)) -
                       3.0f;
        float _10686 = length(_9063.xz());
        float _10728 = max(
            (_9063 +
             vec3(0.0f,
                  3.0f +
                      mix((min(0.5f, _10686 * 0.3333333432674407958984375f) *
                           sin(((_10686 * 2.0f) - _2882) +
                               (atan(_9063.z, _9063.x) * 6.0f))) *
                              1.5f,
                          (_10686 * 0.5f) - 4.0f,
                          clamp(_10686 - 4.599999904632568359375f, 0.0f, 1.0f)),
                  0.0f))
                    .y *
                0.5f,
            length(_1515 +
                   vec3(0.0f, 2.0f, -0.001000000047497451305389404296875f)) -
                6.0f);
        _15812 = _14198;
        _15762 = _14100;
        _14922 = _14299 + _14198;
        _14878 = _14100;
        _14858 = normalize(vec3((((_9318 < _9125) ? _9318 : _9125) -
                                 0.00999999977648258209228515625f) -
                                    (((_9600 < _9407) ? _9600 : _9407) -
                                     0.00999999977648258209228515625f),
                                (((_9882 < _9689) ? _9882 : _9689) -
                                 0.00999999977648258209228515625f) -
                                    (((_10164 < _9971) ? _10164 : _9971) -
                                     0.00999999977648258209228515625f),
                                (((_10446 < _10253) ? _10446 : _10253) -
                                 0.00999999977648258209228515625f) -
                                    (((_10728 < _10535) ? _10728 : _10535) -
                                     0.00999999977648258209228515625f)));
        _14814 = _1493;
        _14423 = _1515;
      } else {
        _15812 = _14229;
        _15762 = _14131;
        _14922 = _14299;
        _14878 = _13963;
        _14858 = _14001;
        _14814 = _13982;
        _14423 = _14002;
      }
      vec3 _10773 = _14423 + vec3(-0.009733284823596477508544921875f,
                                  0.0243332125246524810791015625f,
                                  -0.014599927701056003570556640625f);
      do {
        float _10844;
        bool _14510;
        vec2 _14528;
        int32_t _14669;
        int32_t _14448 = 0;
        float _14449 = 0.0f;
        for (;;) {
          if (_14448 < 70) {
            if (_14449 > 300.0f) {
              _14669 = _14448;
              _14528 = vec2(300.0f, -1.0f);
              _14510 = true;
              break;
            }
            vec3 _10814 = _10773 + (vec3(-0.3244428336620330810546875f,
                                         0.811107099056243896484375f,
                                         -0.4866642653942108154296875f) *
                                    _14449);
            float _10907 = sin(frag_info.time * 1.13699996471405029296875f) *
                           0.14285714924335479736328125f;
            float _10913 = sin((frag_info.time * 1.3980000019073486328125f) +
                               0.699999988079071044921875f) *
                           0.125f;
            float _10919 = sin((frag_info.time * 0.87300002574920654296875f) +
                               0.300000011920928955078125f) *
                           0.20000000298023223876953125f;
            float _10923 = cos(_10919);
            float _10926 = cos(_10913);
            float _10930 = sin(_10919);
            float _10933 = sin(_10913);
            float _10944 = cos(_10907);
            float _10948 = sin(_10907);
            vec3 _10975 = (mat3(vec3(_10923 * _10926, _10930, -_10933),
                                vec3(-_10930, _10923 * _10944, -_10948),
                                vec3(_10933, _10948, _10944 * _10926)) *
                           (_10814 * 1.2999999523162841796875f)) +
                          vec3(-1.0f, (-4.0f) + _2714, 0.0f);
            float _10978 = _10975.y;
            vec3 _11042 = abs(_10975 + vec3(-_10978, 0.0f, 0.0f)) -
                          vec3(1.0f, 2.0f, 0.60000002384185791015625f);
            float _10989 =
                max((length(max(_11042, vec3(0.0f))) +
                     min(max(_11042.x, max(_11042.y, _11042.z)), 0.0f)) *
                        0.54392826557159423828125f,
                    dot(_10975 + vec3(0.5f, 0.5f, 0.0f),
                        vec3(0.707106769084930419921875f,
                             0.707106769084930419921875f, 0.0f)));
            vec3 _11063 = abs(_10975 + vec3(_10978, 0.0f, 0.0f)) -
                          vec3(1.0f, 2.0f, 0.699999988079071044921875f);
            float _11000 = dot(_10975 + vec3(-0.5f, 0.5f, 0.0f),
                               vec3(0.707106769084930419921875f,
                                    -0.707106769084930419921875f, 0.0f));
            float _11003 =
                max((length(max(_11063, vec3(0.0f))) +
                     min(max(_11063.x, max(_11063.y, _11063.z)), 0.0f)) *
                        0.54392826557159423828125f,
                    _11000);
            float _15937 = (_11003 < _10989) ? _11003 : _10989;
            vec3 _11084 = abs(_10975 + vec3(_10978 - 3.0f, -2.0f, 0.0f)) -
                          vec3(1.0f, 3.5f, 0.699999988079071044921875f);
            float _11026 =
                max((length(max(_11084, vec3(0.0f))) +
                     min(max(_11084.x, max(_11084.y, _11084.z)), 0.0f)) *
                        0.54392826557159423828125f,
                    _11000);
            float _15939 = (_11026 < _15937) ? _11026 : _15937;
            float _11114 = length(_10814.xz());
            float _11156 = max(
                (_10814 +
                 vec3(0.0f,
                      3.0f + mix((min(0.5f,
                                      _11114 * 0.3333333432674407958984375f) *
                                  sin(((_11114 * 2.0f) - _2882) +
                                      (atan(_10814.z, _10814.x) * 6.0f))) *
                                     1.5f,
                                 (_11114 * 0.5f) - 4.0f,
                                 clamp(_11114 - 4.599999904632568359375f, 0.0f,
                                       1.0f)),
                      0.0f))
                        .y *
                    0.5f,
                length(_10814 + vec3(0.0f, 2.0f, 0.0f)) - 6.0f);
            float _15940 = (_11156 < _15939) ? _11156 : _15939;
            if (abs(_15940) < 0.001000000047497451305389404296875f) {
              _14669 = _14448;
              _14528 = vec2(_14449, _15897);
              _14510 = true;
              break;
            }
            _10844 = _14449 + _15940;
            _14449 = _10844;
            _14448++;
            continue;
          } else {
            _14669 = _14700;
            _14528 = _14559;
            _14510 = false;
            break;
          }
        }
        if (_14510) {
          _14668 = _14669;
          _14527 = _14528;
          break;
        }
        _14668 = 70;
        _14527 = vec2(300.0f, -1.0f);
        break;
      } while (false);
      vec4 _14967;
      if (_14878.x >= 300.0f) {
        _14967 = texture(cube_map, _14814);
      } else {
        vec4 _11941 = texture(cube_map, reflect(_14814, _14858));
        vec4 _14962;
        if (_14878.y < 1.5f) {
          _14962 = vec4(0.0f, 0.3400000035762786865234375f,
                        0.61000001430511474609375f, 0.5f);
        } else {
          vec4 _14963;
          if (_14878.y < 2.5f) {
            _14963 =
                vec4(0.1599999964237213134765625f, 0.709999978542327880859375f,
                     0.959999978542327880859375f, 0.5f);
          } else {
            vec4 _14964;
            if (_14878.y < 3.5f) {
              _14964 =
                  vec4(0.3300000131130218505859375f, 0.769999980926513671875f,
                       0.9700000286102294921875f, 0.5f);
            } else {
              vec4 _14965;
              if (_14878.y < 4.5f) {
                _14965 = vec4(0.1599999964237213134765625f,
                              0.709999978542327880859375f,
                              0.959999978542327880859375f, 0.5f);
              } else {
                _14965 = mix(vec4(0.100000001490116119384765625f,
                                  0.100000001490116119384765625f,
                                  0.100000001490116119384765625f,
                                  1.2999999523162841796875f),
                             vec4(0.100000001490116119384765625f,
                                  0.100000001490116119384765625f,
                                  0.100000001490116119384765625f, 0.0f),
                             bvec4(_14878.y < 5.5f));
              }
              _14964 = _14965;
            }
            _14963 = _14964;
          }
          _14962 = _14963;
        }
        _14967 = mix(
            vec4(_14962.xyz() * ((_14527.x < 300.0f)
                                     ? 0.60000002384185791015625f
                                     : (1.60000002384185791015625f -
                                        (float(_14668) *
                                         0.014285714365541934967041015625f))),
                 1.0f),
            _11941, vec4((dot(-_14814, _14858) - 1.0f) + _14962.w));
      }
      frag_color +=
          (mix(mix(_14967,
                   mix(vec4(0.86000001430511474609375f,
                            0.980000019073486328125f, 1.0f, 1.0f),
                       vec4(1.65999996662139892578125f,
                            0.980000019073486328125f, 0.5f, 1.0f),
                       vec4(
                           (sin(frag_info.time * 0.3333333432674407958984375f) *
                            0.5f) +
                           0.5f)),
                   vec4(float(_14922) * 0.01571428589522838592529296875f)),
               _14974, vec4(_15079)) *
           vec4(0.25f));
    }
  }
};
}  // namespace Impl

spirv_cross_shader_t* spirv_cross_construct(void) {
  return new FragmentShader<Impl::Shader, Impl::Shader::Resources>();
}

void spirv_cross_destruct(spirv_cross_shader_t* shader) {
  delete static_cast<FragmentShader<Impl::Shader, Impl::Shader::Resources>*>(
      shader);
}

void spirv_cross_invoke(spirv_cross_shader_t* shader) {
  static_cast<FragmentShader<Impl::Shader, Impl::Shader::Resources>*>(shader)
      ->invoke();
}

static const struct spirv_cross_interface vtable = {
    spirv_cross_construct,
    spirv_cross_destruct,
    spirv_cross_invoke,
};

const struct spirv_cross_interface* spirv_cross_get_interface(void) {
  return &vtable;
}
