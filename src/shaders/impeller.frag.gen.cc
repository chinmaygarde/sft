// This C++ shader is autogenerated by spirv-cross.
#include <stdint.h>
#include <array>
#include "spirv_cross/external_interface.h"
#include "spirv_cross/internal_interface.hpp"

using namespace spirv_cross;
using namespace glm;

namespace Impl {
struct Shader {
  struct Resources : FragmentResources {
    internal::StageOutput<vec4> frag_color__;
#define frag_color __res->frag_color__.get()

    inline void init(spirv_cross_shader& s) {
      FragmentResources::init(s);
      s.register_stage_output(frag_color__, 0);
    }
  };

  Resources* __res;

  inline void main() {
    frag_color = vec4(0.0f, 0.0f, 1.0f, 1.0f);
  }
};
}  // namespace Impl

spirv_cross_shader_t* spirv_cross_construct(void) {
  return new FragmentShader<Impl::Shader, Impl::Shader::Resources>();
}

void spirv_cross_destruct(spirv_cross_shader_t* shader) {
  delete static_cast<FragmentShader<Impl::Shader, Impl::Shader::Resources>*>(
      shader);
}

void spirv_cross_invoke(spirv_cross_shader_t* shader) {
  static_cast<FragmentShader<Impl::Shader, Impl::Shader::Resources>*>(shader)
      ->invoke();
}

static const struct spirv_cross_interface vtable = {
    spirv_cross_construct,
    spirv_cross_destruct,
    spirv_cross_invoke,
};

const struct spirv_cross_interface* ImpellerFragmentShader(void) {
  return &vtable;
}
